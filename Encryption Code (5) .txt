import tkinter as tk
from tkinter import messagebox
import uuid
import datetime
import random
import re

# --- 1. المنطق الرياضي الخادع والحقيقي (True Logic) ---
# هذه هي الدالة التي ستقوم بالحساب الحقيقي.
# سيتم إخفاء منطقها لاحقاً باستخدام أدوات إخفاء الشيفرة (Obfuscation).
def calculate_true_secret(num1, num2, num3):
    """
    الدالة التي تحسب النتيجة الحقيقية للغز الرياضي.
    هذه هي "المنهجية المخفية" التي لا يجب أن يراها الهكر بسهولة في الكود المشوش.
    مثال: (الرقم الأول * الرقم الثاني) + الرقم الثالث
    """
    # هذا هو المنطق الحقيقي (الخريطة السرية)
    return (num1 * num2) + num3

# --- 2. منطق ربط الجهاز (Machine Binding - مفهومي) ---
def get_machine_id():
    """
    يحاول الحصول على معرف فريد للجهاز (عنوان MAC).
    هذا المعرف يستخدم لـ "ربط الجهاز".
    ملاحظة: هذا التنفيذ هو لغرض التوضيح ولا يوفر حماية قوية جداً بدون خادم.
    """
    try:
        mac_address_int = uuid.getnode()
        mac_address_hex = ':'.join(("%012X" % mac_address_int)[i:i+2] for i in range(0, 12, 2))
        return mac_address_hex
    except Exception:
        # في حال فشل الحصول على عنوان MAC، نستخدم معرفاً عشوائياً.
        return f"ERROR_MAC_{uuid.uuid4()}"

# لغرض التجربة، نحدد معرف الجهاز "الصالح" ليكون هو معرف الجهاز الحالي.
# في تطبيق حقيقي، هذا المعرف سيأتي من نظام ترخيص أو قاعدة بيانات.
VALID_MACHINE_ID = get_machine_id()

# --- 3. واجهة المستخدم الرسومية (GUI) ---
class DeceptiveCalculatorApp:
    def __init__(self, master):
        self.master = master
        master.title("آلة حاسبة التحدي المحمية")
        master.geometry("450x350") # حجم أكبر قليلاً
        master.resizable(False, False)
        master.config(bg="#f0f0f0")

        # التحقق من التفعيل قبل بناء الواجهة
        if not self._check_activation():
            # إذا فشل التفعيل، يتم تدمير النافذة وإيقاف التطبيق
            master.destroy()
            return

        # متغيرات حالة التحدي
        self.current_challenge_type = None # 'math' أو 'time'
        self.correct_answer_for_current_challenge = None
        self.math_nums = (0, 0, 0) # لتخزين أرقام التحدي الرياضي

        # عناصر الواجهة
        self.label_challenge = tk.Label(master, text="", font=("Arial", 16, "bold"), bg="#f0f0f0", wraplength=400, fg="#333333")
        self.label_challenge.pack(pady=25)

        self.entry_answer = tk.Entry(master, width=25, font=("Arial", 18), justify='center', bd=2, relief="groove")
        self.entry_answer.pack(pady=15)

        self.button_submit = tk.Button(master, text="تحقق من الإجابة", command=self._check_answer, font=("Arial", 14, "bold"), bg="#4CAF50", fg="white", activebackground="#45a049", cursor="hand2")
        self.button_submit.pack(pady=15)

        self.label_feedback = tk.Label(master, text="", font=("Arial", 13), bg="#f0f0f0", fg="red", wraplength=400)
        self.label_feedback.pack(pady=15)

        # توليد التحدي الأول
        self._generate_challenge()

    def _check_activation(self):
        """
        يتحقق مما إذا كان التطبيق مفعلاً على هذا الجهاز.
        هذا هو جزء "ربط الجهاز".
        """
        current_machine_id = get_machine_id()
        if current_machine_id == VALID_MACHINE_ID:
            self.activated_machine_id = current_machine_id
            messagebox.showinfo("تفعيل التطبيق", "تم تفعيل التطبيق بنجاح على هذا الجهاز.")
            return True
        else:
            messagebox.showerror("خطأ في التفعيل", "هذا التطبيق غير مفعّل على هذا الجهاز.\nمعرف الجهاز الحالي: " + current_machine_id + "\nيرجى الاتصال بالدعم للحصول على التفعيل.")
            return False

    def _generate_challenge(self):
        """
        يولد تحدياً رياضياً أو تحدي توقيت خادعاً بشكل عشوائي.
        """
        self.entry_answer.delete(0, tk.END) # مسح حقل الإدخال
        self.label_feedback.config(text="") # مسح رسائل التغذية الراجعة
        self.entry_answer.config(state='normal') # التأكد من أن حقل الإدخال ليس معطلاً
        self.button_submit.config(state='normal') # التأكد من أن الزر ليس معطلاً

        # اختيار نوع التحدي عشوائياً
        challenge_choice = random.choice(['math', 'time'])
        self.current_challenge_type = challenge_choice

        if self.current_challenge_type == 'math':
            self._generate_math_challenge()
        else: # 'time'
            self._generate_time_challenge()

    def _generate_math_challenge(self):
        """
        يولد تحدياً رياضياً خادعاً ويعرضه للمستخدم.
        """
        # الأرقام المستخدمة في التحدي (يمكن أن تكون عشوائية)
        self.math_nums = (random.randint(1, 9), random.randint(1, 9), random.randint(1, 9))

        # الرسالة الخادعة التي تظهر للمستخدم (جمع)
        deceptive_message = f"التحدي: احسب هذه الأرقام: {self.math_nums[0]} + {self.math_nums[1]} + {self.math_nums[2]}"
        self.label_challenge.config(text=deceptive_message)

        # النتيجة الحقيقية (ضرب ثم جمع) - هذه هي "الخريطة/المنطق المخفي"
        self.correct_answer_for_current_challenge = calculate_true_secret(self.math_nums[0], self.math_nums[1], self.math_nums[2])
        self.entry_answer.config(placeholder="أدخل النتيجة هنا (رقم)")


    def _generate_time_challenge(self):
        """
        يولد تحدي توقيت خادعاً ويعرضه للمستخدم.
        """
        deceptive_cities = ["طوكيو", "ميونيخ", "لندن", "نيويورك", "دبي", "سيدني", "القاهرة"]
        chosen_city = random.choice(deceptive_cities)

        # الرسالة الخادعة: يسأل عن توقيت مدينة أخرى
        deceptive_question = f"التحدي: ما هو التوقيت الحالي في {chosen_city}؟ (HH:MM)"
        self.label_challenge.config(text=deceptive_question)

        # الإجابة الحقيقية: التوقيت المحلي لجهاز المستخدم
        now = datetime.datetime.now()
        self.correct_answer_for_current_challenge = now.strftime("%H:%M")
        self.entry_answer.config(placeholder="أدخل توقيتك المحلي (HH:MM)")


    def _check_answer(self):
        """
        يتحقق من إجابة المستخدم بناءً على نوع التحدي الحالي والمنطق الحقيقي.
        """
        user_input = self.entry_answer.get().strip()

        if self.current_challenge_type == 'math':
            try:
                user_answer = int(user_input)
                if user_answer == self.correct_answer_for_current_challenge:
                    self.label_feedback.config(text="إجابة صحيحة! أحسنت.", fg="green")
                    messagebox.showinfo("نجاح", "لقد نجحت في التحدي الرياضي!")
                    self._generate_challenge() # تحدي جديد
                else:
                    self.label_feedback.config(text="إجابة خاطئة. حاول مرة أخرى.", fg="red")
            except ValueError:
                self.label_feedback.config(text="الرجاء إدخال رقم صحيح.", fg="orange")

        elif self.current_challenge_type == 'time':
            # التحقق من تنسيق الوقت (HH:MM)
            if re.fullmatch(r"([01]\d|2[0-3]):([0-5]\d)", user_input):
                if user_input == self.correct_answer_for_current_challenge:
                    self.label_feedback.config(text="إجابة صحيحة! أحسنت.", fg="green")
                    messagebox.showinfo("نجاح", "لقد نجحت في تحدي التوقيت!")
                    self._generate_challenge() # تحدي جديد
                else:
                    self.label_feedback.config(text="إجابة خاطئة. حاول مرة أخرى.", fg="red")
            else:
                self.label_feedback.config(text="الرجاء إدخال الوقت بتنسيق HH:MM (مثال: 14:30).", fg="orange")

        else:
            self.label_feedback.config(text="نوع تحدي غير معروف. يرجى إعادة التشغيل.", fg="red")


# --- نقطة الدخول للتطبيق ---
if __name__ == "__main__":
    root = tk.Tk()
    app = DeceptiveCalculatorApp(root)
    root.mainloop()
